plugins {
    id 'java'
    id 'org.springframework.boot'
    id 'io.spring.dependency-management'
    id 'org.openapi.generator'
}

group = GROUP_ID
version = VERSION

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(JAVA_VERSION)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${OPENAPI_VERSION}"
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.mysql:mysql-connector-j'
    runtimeOnly 'org.flywaydb:flyway-mysql'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testRuntimeOnly 'com.h2database:h2'
}

tasks.named('test') {
    useJUnitPlatform()
}

tasks.named('openApiGenerate') {
    outputs.upToDateWhen { false }
    generatorName = 'spring'
    inputSpec = "$rootDir/src/main/resources/static/openapi.yml"
    apiPackage = 'com.example.api'
    modelPackage = 'com.example.model'
    modelNameSuffix = 'DTO'
    configOptions = [interfaceOnly  : 'true',
                     useTags        : 'true',
                     useSpringBoot3 : 'true',
                     useJakartaEe   : 'true',
                     useOptional    : 'false',
                     openApiNullable: 'false',
                     library        : 'spring-boot',
                     dateLibrary    : 'java8']

    doLast {
        copy {
            from layout.buildDirectory.dir("generate-resources/main/src/main/java")
            into layout.buildDirectory.dir('generated/sources/annotationProcessor/java/main')
        }
        delete(layout.buildDirectory.dir("generate-resources").get())
    }
}

tasks.named('compileJava') {
    dependsOn('openApiGenerate')
}